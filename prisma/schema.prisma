// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  firebaseUid     String    @unique
  username        String    @unique @db.VarChar(20)
  email           String    @unique
  profileImageUrl String?
  bio             String?   @db.VarChar(500)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  stories         Story[]
  likes           Like[]
  comments        Comment[]
}

model Story {
  id              Int       @id @default(autoincrement())
  title           String 
  description     String    @db.VarChar(500)
  coverImageUrl   String 
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  authorId        Int
  author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  waypoints       Waypoint[]
  likes           Like[]
  comments        Comment[]

  @@index([authorId])
}

model Waypoint {
  id              Int       @id @default(autoincrement())
  orderIndex      Int
  latitude        Float
  longitude       Float
  caption         String?   @db.VarChar(500)
  imageUrl        String?
  audioUrl        String?
  timeStamp       DateTime  @default(now())

  storyId         Int
  story           Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@index([storyId])
}

model Like {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())

  userId          Int
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  storyId         Int
  story           Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
  @@index([storyId])
}

model Comment {
  id              Int       @id @default(autoincrement())
  text            String    @db.VarChar(500)
  createdAt       DateTime  @default(now())

  authorId        Int
  user            User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  storyId         Int
  story           Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@index([storyId])
  @@index([authorId])
}